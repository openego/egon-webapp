# Generated by Django 3.2.18 on 2023-05-25 07:37

import django.contrib.gis.db.models.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('map', '0027_h2voronoi'),
    ]

    operations = [
        migrations.CreateModel(
            name='GasCH4Industry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('annual_demand', models.FloatField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GasH2Industry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('annual_demand', models.FloatField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GasPotentialBiogasProduction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('p_nom', models.FloatField(null=True, verbose_name='P nom')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GasPotentialNaturalGasProduction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('p_nom', models.FloatField(null=True, verbose_name='P nom')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PVGroundMountedPotentialAreaAgriculture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('area_km2', models.FloatField(null=True, verbose_name='Potential area (km²)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PVGroundMountedPotentialAreaHighways_Railroads',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('area_km2', models.FloatField(null=True, verbose_name='Potential area (km²)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PVGroundMountedPVPlant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('el_capacity', models.FloatField(verbose_name='Electrical Capacity')),
                ('voltage_level', models.PositiveIntegerField(verbose_name='Voltage level')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PVRoofTopPVPlant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('el_capacity', models.FloatField(verbose_name='Electrical Capacity')),
                ('voltage_level', models.PositiveIntegerField(verbose_name='Voltage level')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransportHeavyDuty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('annual_demand', models.FloatField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WindOffshoreWindPark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('el_capacity', models.FloatField(verbose_name='Electrical Capacity')),
                ('voltage_level', models.PositiveIntegerField(verbose_name='Voltage level')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WindOnshorePotentialArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('area_km2', models.FloatField(null=True, verbose_name='Potential area (km²)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WindOnshoreWindPark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('el_capacity', models.FloatField(verbose_name='Electrical Capacity')),
                ('voltage_level', models.PositiveIntegerField(verbose_name='Voltage level')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.DeleteModel(
            name='SupplyPotentialPVGround',
        ),
        migrations.DeleteModel(
            name='SupplyPotentialWind',
        ),
        migrations.DeleteModel(
            name='SupplySolarGround',
        ),
        migrations.DeleteModel(
            name='SupplyWindOnshore',
        ),
        migrations.RemoveField(
            model_name='ehvhvsubstation',
            name='power_type',
        ),
        migrations.RemoveField(
            model_name='ehvhvsubstation',
            name='voltage',
        ),
        migrations.RemoveField(
            model_name='ehvline',
            name='carrier',
        ),
        migrations.RemoveField(
            model_name='ehvline',
            name='type',
        ),
        migrations.RemoveField(
            model_name='hvline',
            name='carrier',
        ),
        migrations.RemoveField(
            model_name='hvline',
            name='type',
        ),
        migrations.RemoveField(
            model_name='hvmvsubstation',
            name='power_type',
        ),
        migrations.RemoveField(
            model_name='hvmvsubstation',
            name='voltage',
        ),
        migrations.RemoveField(
            model_name='supplybiomass',
            name='carrier',
        ),
        migrations.RemoveField(
            model_name='supplyrunofriver',
            name='carrier',
        ),
        migrations.AlterField(
            model_name='maplayer',
            name='scenario',
            field=models.CharField(choices=[('2035', '2035'), ('100RE', '100RE'), ('both', 'both')], help_text="Identifies the scenario. Use 'both' if there is no difference.", max_length=5),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='demand_population_2035_sum',
            field=models.FloatField(null=True, verbose_name='Population'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='demand_transport_mit_demand_100re_annual_demand',
            field=models.FloatField(null=True, verbose_name='Annual Demand (MWh)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='demand_transport_mit_demand_100re_max',
            field=models.FloatField(null=True, verbose_name='Maximal hourly demand (MW)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='demand_transport_mit_demand_100re_min',
            field=models.FloatField(null=True, verbose_name='Minimal hourly demand (MW)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='demand_transport_mit_demand_2035_annual_demand',
            field=models.FloatField(null=True, verbose_name='Annual Demand (MWh)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='demand_transport_mit_demand_2035_max',
            field=models.FloatField(null=True, verbose_name='Maximal hourly demand (MW)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='demand_transport_mit_demand_2035_min',
            field=models.FloatField(null=True, verbose_name='Minimal hourly demand (MW)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='flex_pot_electricity_electromobility_100re_charging_demand',
            field=models.FloatField(null=True, verbose_name='Charging demand (MWh)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='flex_pot_electricity_electromobility_100re_flex_demand',
            field=models.FloatField(null=True, verbose_name='Flexible demand (MW)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='flex_pot_electricity_electromobility_100re_flex_share',
            field=models.FloatField(null=True, verbose_name='Share of flexible demand (%)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='flex_pot_electricity_electromobility_2035_charging_demand',
            field=models.FloatField(null=True, verbose_name='Charging demand (MWh)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='flex_pot_electricity_electromobility_2035_flex_demand',
            field=models.FloatField(null=True, verbose_name='Flexible demand (MW)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='flex_pot_electricity_electromobility_2035_flex_share',
            field=models.FloatField(null=True, verbose_name='Share of flexible demand (%)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='supply_other_biomass_fired_power_plants_2035_el_capacity',
            field=models.FloatField(null=True, verbose_name='Installed capacity (MW)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='supply_other_biomass_fired_power_plants_2035_unit_count',
            field=models.FloatField(null=True, verbose_name='Number of power plants'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='supply_other_gas_fired_power_plants_2035_el_capacity',
            field=models.FloatField(null=True, verbose_name='Installed capacity (MW)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='supply_other_gas_fired_power_plants_2035_unit_count',
            field=models.FloatField(null=True, verbose_name='Number of power plants'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='supply_other_hydro_2035_el_capacity',
            field=models.FloatField(null=True, verbose_name='Installed capacity (MW)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='supply_other_hydro_2035_unit_count',
            field=models.FloatField(null=True, verbose_name='Number of power plants'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='supply_other_other_power_plants_2035_el_capacity',
            field=models.FloatField(null=True, verbose_name='Installed capacity (MW)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='supply_other_other_power_plants_2035_unit_count',
            field=models.FloatField(null=True, verbose_name='Number of power plants'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='supply_pv_roof_top_installed_capacity_100re_el_capacity',
            field=models.FloatField(null=True, verbose_name='Installed capacity (MW)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='supply_pv_roof_top_installed_capacity_100re_unit_count',
            field=models.FloatField(null=True, verbose_name='Number of power plants'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='supply_pv_roof_top_installed_capacity_2035_el_capacity',
            field=models.FloatField(null=True, verbose_name='Installed capacity (MW)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='supply_pv_roof_top_installed_capacity_2035_unit_count',
            field=models.FloatField(null=True, verbose_name='Number of power plants'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='supply_pv_roof_top_potential_production_100re_feedin',
            field=models.FloatField(null=True, verbose_name='Potential production feedin'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='supply_pv_roof_top_potential_production_2035_feedin',
            field=models.FloatField(null=True, verbose_name='Potential production feedin'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='supply_wind_onshore_installed_capacity_100re_el_capacity',
            field=models.FloatField(null=True, verbose_name='Installed capacity (MW)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='supply_wind_onshore_installed_capacity_100re_unit_count',
            field=models.FloatField(null=True, verbose_name='Number of power plants'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='supply_wind_onshore_installed_capacity_2035_el_capacity',
            field=models.FloatField(null=True, verbose_name='Installed capacity (MW)'),
        ),
        migrations.AlterField(
            model_name='mvgriddistrictdata',
            name='supply_wind_onshore_installed_capacity_2035_unit_count',
            field=models.FloatField(null=True, verbose_name='Number of power plants'),
        ),
    ]
